/*
 * This file is generated by jOOQ.
 */
package com.netcracker.parkinglotmanagement.data.tables;


import com.netcracker.parkinglotmanagement.data.DefaultSchema;
import com.netcracker.parkinglotmanagement.data.Keys;
import com.netcracker.parkinglotmanagement.data.tables.records.ReservationRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ReservationTable extends TableImpl<ReservationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>RESERVATION</code>
     */
    public static final ReservationTable RESERVATION = new ReservationTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReservationRecord> getRecordType() {
        return ReservationRecord.class;
    }

    /**
     * The column <code>RESERVATION.ID</code>.
     */
    public final TableField<ReservationRecord, UUID> ID = createField(DSL.name("ID"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>RESERVATION.BOOKING_DATE</code>.
     */
    public final TableField<ReservationRecord, LocalDateTime> BOOKING_DATE = createField(DSL.name("BOOKING_DATE"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>RESERVATION.CUSTOMER_ID</code>.
     */
    public final TableField<ReservationRecord, UUID> CUSTOMER_ID = createField(DSL.name("CUSTOMER_ID"), SQLDataType.UUID, this, "");

    /**
     * The column <code>RESERVATION.DURATION_IN_HOURS</code>.
     */
    public final TableField<ReservationRecord, Integer> DURATION_IN_HOURS = createField(DSL.name("DURATION_IN_HOURS"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>RESERVATION.PARKING_SLOT_ID</code>.
     */
    public final TableField<ReservationRecord, UUID> PARKING_SLOT_ID = createField(DSL.name("PARKING_SLOT_ID"), SQLDataType.UUID, this, "");

    /**
     * The column <code>RESERVATION.START_TIMESTAMP</code>.
     */
    public final TableField<ReservationRecord, byte[]> START_TIMESTAMP = createField(DSL.name("START_TIMESTAMP"), SQLDataType.VARBINARY.nullable(false), this, "");

    private ReservationTable(Name alias, Table<ReservationRecord> aliased) {
        this(alias, aliased, null);
    }

    private ReservationTable(Name alias, Table<ReservationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>RESERVATION</code> table reference
     */
    public ReservationTable(String alias) {
        this(DSL.name(alias), RESERVATION);
    }

    /**
     * Create an aliased <code>RESERVATION</code> table reference
     */
    public ReservationTable(Name alias) {
        this(alias, RESERVATION);
    }

    /**
     * Create a <code>RESERVATION</code> table reference
     */
    public ReservationTable() {
        this(DSL.name("RESERVATION"), null);
    }

    public <O extends Record> ReservationTable(Table<O> child, ForeignKey<O, ReservationRecord> key) {
        super(child, key, RESERVATION);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ReservationRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_23;
    }

    @Override
    public List<UniqueKey<ReservationRecord>> getKeys() {
        return Arrays.<UniqueKey<ReservationRecord>>asList(Keys.CONSTRAINT_23);
    }

    @Override
    public ReservationTable as(String alias) {
        return new ReservationTable(DSL.name(alias), this);
    }

    @Override
    public ReservationTable as(Name alias) {
        return new ReservationTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ReservationTable rename(String name) {
        return new ReservationTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ReservationTable rename(Name name) {
        return new ReservationTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<UUID, LocalDateTime, UUID, Integer, UUID, byte[]> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
