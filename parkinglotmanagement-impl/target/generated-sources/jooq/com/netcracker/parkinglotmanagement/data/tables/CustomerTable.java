/*
 * This file is generated by jOOQ.
 */
package com.netcracker.parkinglotmanagement.data.tables;


import com.netcracker.parkinglotmanagement.data.DefaultSchema;
import com.netcracker.parkinglotmanagement.data.Keys;
import com.netcracker.parkinglotmanagement.data.tables.records.CustomerRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CustomerTable extends TableImpl<CustomerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>CUSTOMER</code>
     */
    public static final CustomerTable CUSTOMER = new CustomerTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CustomerRecord> getRecordType() {
        return CustomerRecord.class;
    }

    /**
     * The column <code>CUSTOMER.ID</code>.
     */
    public final TableField<CustomerRecord, UUID> ID = createField(DSL.name("ID"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>CUSTOMER.CONTACT_NUMBER</code>.
     */
    public final TableField<CustomerRecord, Integer> CONTACT_NUMBER = createField(DSL.name("CONTACT_NUMBER"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>CUSTOMER.EMAIL</code>.
     */
    public final TableField<CustomerRecord, String> EMAIL = createField(DSL.name("EMAIL"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>CUSTOMER.NAME</code>.
     */
    public final TableField<CustomerRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>CUSTOMER.VEHICLE_NUMBER</code>.
     */
    public final TableField<CustomerRecord, String> VEHICLE_NUMBER = createField(DSL.name("VEHICLE_NUMBER"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    private CustomerTable(Name alias, Table<CustomerRecord> aliased) {
        this(alias, aliased, null);
    }

    private CustomerTable(Name alias, Table<CustomerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>CUSTOMER</code> table reference
     */
    public CustomerTable(String alias) {
        this(DSL.name(alias), CUSTOMER);
    }

    /**
     * Create an aliased <code>CUSTOMER</code> table reference
     */
    public CustomerTable(Name alias) {
        this(alias, CUSTOMER);
    }

    /**
     * Create a <code>CUSTOMER</code> table reference
     */
    public CustomerTable() {
        this(DSL.name("CUSTOMER"), null);
    }

    public <O extends Record> CustomerTable(Table<O> child, ForeignKey<O, CustomerRecord> key) {
        super(child, key, CUSTOMER);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<CustomerRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_5;
    }

    @Override
    public List<UniqueKey<CustomerRecord>> getKeys() {
        return Arrays.<UniqueKey<CustomerRecord>>asList(Keys.CONSTRAINT_5);
    }

    @Override
    public CustomerTable as(String alias) {
        return new CustomerTable(DSL.name(alias), this);
    }

    @Override
    public CustomerTable as(Name alias) {
        return new CustomerTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CustomerTable rename(String name) {
        return new CustomerTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CustomerTable rename(Name name) {
        return new CustomerTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<UUID, Integer, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
