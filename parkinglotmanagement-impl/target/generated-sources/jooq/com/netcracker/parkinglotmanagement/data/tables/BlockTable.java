/*
 * This file is generated by jOOQ.
 */
package com.netcracker.parkinglotmanagement.data.tables;


import com.netcracker.parkinglotmanagement.data.DefaultSchema;
import com.netcracker.parkinglotmanagement.data.Keys;
import com.netcracker.parkinglotmanagement.data.tables.records.BlockRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BlockTable extends TableImpl<BlockRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>BLOCK</code>
     */
    public static final BlockTable BLOCK = new BlockTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BlockRecord> getRecordType() {
        return BlockRecord.class;
    }

    /**
     * The column <code>BLOCK.ID</code>.
     */
    public final TableField<BlockRecord, UUID> ID = createField(DSL.name("ID"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>BLOCK.BLOCK_CODE</code>.
     */
    public final TableField<BlockRecord, String> BLOCK_CODE = createField(DSL.name("BLOCK_CODE"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>BLOCK.NUMBER_OF_FLOORS</code>.
     */
    public final TableField<BlockRecord, Integer> NUMBER_OF_FLOORS = createField(DSL.name("NUMBER_OF_FLOORS"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>BLOCK.PARKING_LOT_ID</code>.
     */
    public final TableField<BlockRecord, UUID> PARKING_LOT_ID = createField(DSL.name("PARKING_LOT_ID"), SQLDataType.UUID, this, "");

    private BlockTable(Name alias, Table<BlockRecord> aliased) {
        this(alias, aliased, null);
    }

    private BlockTable(Name alias, Table<BlockRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>BLOCK</code> table reference
     */
    public BlockTable(String alias) {
        this(DSL.name(alias), BLOCK);
    }

    /**
     * Create an aliased <code>BLOCK</code> table reference
     */
    public BlockTable(Name alias) {
        this(alias, BLOCK);
    }

    /**
     * Create a <code>BLOCK</code> table reference
     */
    public BlockTable() {
        this(DSL.name("BLOCK"), null);
    }

    public <O extends Record> BlockTable(Table<O> child, ForeignKey<O, BlockRecord> key) {
        super(child, key, BLOCK);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<BlockRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_3;
    }

    @Override
    public List<UniqueKey<BlockRecord>> getKeys() {
        return Arrays.<UniqueKey<BlockRecord>>asList(Keys.CONSTRAINT_3);
    }

    @Override
    public BlockTable as(String alias) {
        return new BlockTable(DSL.name(alias), this);
    }

    @Override
    public BlockTable as(Name alias) {
        return new BlockTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BlockTable rename(String name) {
        return new BlockTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BlockTable rename(Name name) {
        return new BlockTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, String, Integer, UUID> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
