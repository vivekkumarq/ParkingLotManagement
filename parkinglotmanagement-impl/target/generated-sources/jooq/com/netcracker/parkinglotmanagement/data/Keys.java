/*
 * This file is generated by jOOQ.
 */
package com.netcracker.parkinglotmanagement.data;


import com.netcracker.parkinglotmanagement.data.tables.BlockTable;
import com.netcracker.parkinglotmanagement.data.tables.CustomerTable;
import com.netcracker.parkinglotmanagement.data.tables.FloorTable;
import com.netcracker.parkinglotmanagement.data.tables.ParkingLotTable;
import com.netcracker.parkinglotmanagement.data.tables.ParkingSlipTable;
import com.netcracker.parkinglotmanagement.data.tables.ParkingSlotTable;
import com.netcracker.parkinglotmanagement.data.tables.ReservationTable;
import com.netcracker.parkinglotmanagement.data.tables.records.BlockRecord;
import com.netcracker.parkinglotmanagement.data.tables.records.CustomerRecord;
import com.netcracker.parkinglotmanagement.data.tables.records.FloorRecord;
import com.netcracker.parkinglotmanagement.data.tables.records.ParkingLotRecord;
import com.netcracker.parkinglotmanagement.data.tables.records.ParkingSlipRecord;
import com.netcracker.parkinglotmanagement.data.tables.records.ParkingSlotRecord;
import com.netcracker.parkinglotmanagement.data.tables.records.ReservationRecord;

import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in 
 * the default schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<BlockRecord> CONSTRAINT_3 = Internal.createUniqueKey(BlockTable.BLOCK, DSL.name("CONSTRAINT_3"), new TableField[] { BlockTable.BLOCK.ID }, true);
    public static final UniqueKey<CustomerRecord> CONSTRAINT_5 = Internal.createUniqueKey(CustomerTable.CUSTOMER, DSL.name("CONSTRAINT_5"), new TableField[] { CustomerTable.CUSTOMER.ID }, true);
    public static final UniqueKey<FloorRecord> CONSTRAINT_3F = Internal.createUniqueKey(FloorTable.FLOOR, DSL.name("CONSTRAINT_3F"), new TableField[] { FloorTable.FLOOR.ID }, true);
    public static final UniqueKey<ParkingLotRecord> CONSTRAINT_1 = Internal.createUniqueKey(ParkingLotTable.PARKING_LOT, DSL.name("CONSTRAINT_1"), new TableField[] { ParkingLotTable.PARKING_LOT.ID }, true);
    public static final UniqueKey<ParkingSlipRecord> CONSTRAINT_2 = Internal.createUniqueKey(ParkingSlipTable.PARKING_SLIP, DSL.name("CONSTRAINT_2"), new TableField[] { ParkingSlipTable.PARKING_SLIP.ID }, true);
    public static final UniqueKey<ParkingSlotRecord> CONSTRAINT_21 = Internal.createUniqueKey(ParkingSlotTable.PARKING_SLOT, DSL.name("CONSTRAINT_21"), new TableField[] { ParkingSlotTable.PARKING_SLOT.ID }, true);
    public static final UniqueKey<ReservationRecord> CONSTRAINT_23 = Internal.createUniqueKey(ReservationTable.RESERVATION, DSL.name("CONSTRAINT_23"), new TableField[] { ReservationTable.RESERVATION.ID }, true);
}
