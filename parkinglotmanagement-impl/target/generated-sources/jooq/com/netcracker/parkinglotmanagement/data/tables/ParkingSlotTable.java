/*
 * This file is generated by jOOQ.
 */
package com.netcracker.parkinglotmanagement.data.tables;


import com.netcracker.parkinglotmanagement.data.DefaultSchema;
import com.netcracker.parkinglotmanagement.data.Keys;
import com.netcracker.parkinglotmanagement.data.tables.records.ParkingSlotRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ParkingSlotTable extends TableImpl<ParkingSlotRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PARKING_SLOT</code>
     */
    public static final ParkingSlotTable PARKING_SLOT = new ParkingSlotTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ParkingSlotRecord> getRecordType() {
        return ParkingSlotRecord.class;
    }

    /**
     * The column <code>PARKING_SLOT.ID</code>.
     */
    public final TableField<ParkingSlotRecord, UUID> ID = createField(DSL.name("ID"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>PARKING_SLOT.CHARGES</code>.
     */
    public final TableField<ParkingSlotRecord, Integer> CHARGES = createField(DSL.name("CHARGES"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PARKING_SLOT.FLOOR_ID</code>.
     */
    public final TableField<ParkingSlotRecord, UUID> FLOOR_ID = createField(DSL.name("FLOOR_ID"), SQLDataType.UUID, this, "");

    /**
     * The column <code>PARKING_SLOT.SLOT_NUMBER</code>.
     */
    public final TableField<ParkingSlotRecord, Integer> SLOT_NUMBER = createField(DSL.name("SLOT_NUMBER"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PARKING_SLOT.VEHICLE_TYPE</code>.
     */
    public final TableField<ParkingSlotRecord, String> VEHICLE_TYPE = createField(DSL.name("VEHICLE_TYPE"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private ParkingSlotTable(Name alias, Table<ParkingSlotRecord> aliased) {
        this(alias, aliased, null);
    }

    private ParkingSlotTable(Name alias, Table<ParkingSlotRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>PARKING_SLOT</code> table reference
     */
    public ParkingSlotTable(String alias) {
        this(DSL.name(alias), PARKING_SLOT);
    }

    /**
     * Create an aliased <code>PARKING_SLOT</code> table reference
     */
    public ParkingSlotTable(Name alias) {
        this(alias, PARKING_SLOT);
    }

    /**
     * Create a <code>PARKING_SLOT</code> table reference
     */
    public ParkingSlotTable() {
        this(DSL.name("PARKING_SLOT"), null);
    }

    public <O extends Record> ParkingSlotTable(Table<O> child, ForeignKey<O, ParkingSlotRecord> key) {
        super(child, key, PARKING_SLOT);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ParkingSlotRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_21;
    }

    @Override
    public List<UniqueKey<ParkingSlotRecord>> getKeys() {
        return Arrays.<UniqueKey<ParkingSlotRecord>>asList(Keys.CONSTRAINT_21);
    }

    @Override
    public ParkingSlotTable as(String alias) {
        return new ParkingSlotTable(DSL.name(alias), this);
    }

    @Override
    public ParkingSlotTable as(Name alias) {
        return new ParkingSlotTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ParkingSlotTable rename(String name) {
        return new ParkingSlotTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ParkingSlotTable rename(Name name) {
        return new ParkingSlotTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<UUID, Integer, UUID, Integer, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
