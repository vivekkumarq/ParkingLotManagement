/*
 * This file is generated by jOOQ.
 */
package com.netcracker.parkinglotmanagement.data.tables;


import com.netcracker.parkinglotmanagement.data.DefaultSchema;
import com.netcracker.parkinglotmanagement.data.Keys;
import com.netcracker.parkinglotmanagement.data.tables.records.FloorRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FloorTable extends TableImpl<FloorRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>FLOOR</code>
     */
    public static final FloorTable FLOOR = new FloorTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FloorRecord> getRecordType() {
        return FloorRecord.class;
    }

    /**
     * The column <code>FLOOR.ID</code>.
     */
    public final TableField<FloorRecord, UUID> ID = createField(DSL.name("ID"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>FLOOR.BLOCK_ID</code>.
     */
    public final TableField<FloorRecord, UUID> BLOCK_ID = createField(DSL.name("BLOCK_ID"), SQLDataType.UUID, this, "");

    /**
     * The column <code>FLOOR.FLOOR_NO</code>.
     */
    public final TableField<FloorRecord, Integer> FLOOR_NO = createField(DSL.name("FLOOR_NO"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>FLOOR.NUMBER_OF_SLOTS</code>.
     */
    public final TableField<FloorRecord, Integer> NUMBER_OF_SLOTS = createField(DSL.name("NUMBER_OF_SLOTS"), SQLDataType.INTEGER, this, "");

    private FloorTable(Name alias, Table<FloorRecord> aliased) {
        this(alias, aliased, null);
    }

    private FloorTable(Name alias, Table<FloorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>FLOOR</code> table reference
     */
    public FloorTable(String alias) {
        this(DSL.name(alias), FLOOR);
    }

    /**
     * Create an aliased <code>FLOOR</code> table reference
     */
    public FloorTable(Name alias) {
        this(alias, FLOOR);
    }

    /**
     * Create a <code>FLOOR</code> table reference
     */
    public FloorTable() {
        this(DSL.name("FLOOR"), null);
    }

    public <O extends Record> FloorTable(Table<O> child, ForeignKey<O, FloorRecord> key) {
        super(child, key, FLOOR);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<FloorRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_3F;
    }

    @Override
    public List<UniqueKey<FloorRecord>> getKeys() {
        return Arrays.<UniqueKey<FloorRecord>>asList(Keys.CONSTRAINT_3F);
    }

    @Override
    public FloorTable as(String alias) {
        return new FloorTable(DSL.name(alias), this);
    }

    @Override
    public FloorTable as(Name alias) {
        return new FloorTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FloorTable rename(String name) {
        return new FloorTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FloorTable rename(Name name) {
        return new FloorTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, UUID, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
