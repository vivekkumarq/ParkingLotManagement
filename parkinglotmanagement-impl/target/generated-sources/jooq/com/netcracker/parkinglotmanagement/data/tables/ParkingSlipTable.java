/*
 * This file is generated by jOOQ.
 */
package com.netcracker.parkinglotmanagement.data.tables;


import com.netcracker.parkinglotmanagement.data.DefaultSchema;
import com.netcracker.parkinglotmanagement.data.Keys;
import com.netcracker.parkinglotmanagement.data.tables.records.ParkingSlipRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ParkingSlipTable extends TableImpl<ParkingSlipRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PARKING_SLIP</code>
     */
    public static final ParkingSlipTable PARKING_SLIP = new ParkingSlipTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ParkingSlipRecord> getRecordType() {
        return ParkingSlipRecord.class;
    }

    /**
     * The column <code>PARKING_SLIP.ID</code>.
     */
    public final TableField<ParkingSlipRecord, UUID> ID = createField(DSL.name("ID"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>PARKING_SLIP.ACTUAL_ENTRY_TIME</code>.
     */
    public final TableField<ParkingSlipRecord, byte[]> ACTUAL_ENTRY_TIME = createField(DSL.name("ACTUAL_ENTRY_TIME"), SQLDataType.VARBINARY, this, "");

    /**
     * The column <code>PARKING_SLIP.ACTUAL_EXIT_TIME</code>.
     */
    public final TableField<ParkingSlipRecord, byte[]> ACTUAL_EXIT_TIME = createField(DSL.name("ACTUAL_EXIT_TIME"), SQLDataType.VARBINARY, this, "");

    /**
     * The column <code>PARKING_SLIP.BASIC_COST</code>.
     */
    public final TableField<ParkingSlipRecord, BigDecimal> BASIC_COST = createField(DSL.name("BASIC_COST"), SQLDataType.DECIMAL(19, 2).nullable(false), this, "");

    /**
     * The column <code>PARKING_SLIP.PARKING_SLOT_RESERVATION_ID</code>.
     */
    public final TableField<ParkingSlipRecord, UUID> PARKING_SLOT_RESERVATION_ID = createField(DSL.name("PARKING_SLOT_RESERVATION_ID"), SQLDataType.UUID, this, "");

    /**
     * The column <code>PARKING_SLIP.PENALTY</code>.
     */
    public final TableField<ParkingSlipRecord, BigDecimal> PENALTY = createField(DSL.name("PENALTY"), SQLDataType.DECIMAL(19, 2), this, "");

    /**
     * The column <code>PARKING_SLIP.TOTAL_COST</code>.
     */
    public final TableField<ParkingSlipRecord, BigDecimal> TOTAL_COST = createField(DSL.name("TOTAL_COST"), SQLDataType.DECIMAL(19, 2).nullable(false), this, "");

    private ParkingSlipTable(Name alias, Table<ParkingSlipRecord> aliased) {
        this(alias, aliased, null);
    }

    private ParkingSlipTable(Name alias, Table<ParkingSlipRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>PARKING_SLIP</code> table reference
     */
    public ParkingSlipTable(String alias) {
        this(DSL.name(alias), PARKING_SLIP);
    }

    /**
     * Create an aliased <code>PARKING_SLIP</code> table reference
     */
    public ParkingSlipTable(Name alias) {
        this(alias, PARKING_SLIP);
    }

    /**
     * Create a <code>PARKING_SLIP</code> table reference
     */
    public ParkingSlipTable() {
        this(DSL.name("PARKING_SLIP"), null);
    }

    public <O extends Record> ParkingSlipTable(Table<O> child, ForeignKey<O, ParkingSlipRecord> key) {
        super(child, key, PARKING_SLIP);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ParkingSlipRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_2;
    }

    @Override
    public List<UniqueKey<ParkingSlipRecord>> getKeys() {
        return Arrays.<UniqueKey<ParkingSlipRecord>>asList(Keys.CONSTRAINT_2);
    }

    @Override
    public ParkingSlipTable as(String alias) {
        return new ParkingSlipTable(DSL.name(alias), this);
    }

    @Override
    public ParkingSlipTable as(Name alias) {
        return new ParkingSlipTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ParkingSlipTable rename(String name) {
        return new ParkingSlipTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ParkingSlipTable rename(Name name) {
        return new ParkingSlipTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, byte[], byte[], BigDecimal, UUID, BigDecimal, BigDecimal> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
