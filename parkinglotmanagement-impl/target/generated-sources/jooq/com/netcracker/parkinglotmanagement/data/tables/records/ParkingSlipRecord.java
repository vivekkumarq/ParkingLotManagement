/*
 * This file is generated by jOOQ.
 */
package com.netcracker.parkinglotmanagement.data.tables.records;


import com.netcracker.parkinglotmanagement.data.tables.ParkingSlipTable;

import java.math.BigDecimal;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ParkingSlipRecord extends UpdatableRecordImpl<ParkingSlipRecord> implements Record7<UUID, byte[], byte[], BigDecimal, UUID, BigDecimal, BigDecimal> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>PARKING_SLIP.ID</code>.
     */
    public ParkingSlipRecord setId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>PARKING_SLIP.ID</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>PARKING_SLIP.ACTUAL_ENTRY_TIME</code>.
     */
    public ParkingSlipRecord setActualEntryTime(byte[] value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>PARKING_SLIP.ACTUAL_ENTRY_TIME</code>.
     */
    public byte[] getActualEntryTime() {
        return (byte[]) get(1);
    }

    /**
     * Setter for <code>PARKING_SLIP.ACTUAL_EXIT_TIME</code>.
     */
    public ParkingSlipRecord setActualExitTime(byte[] value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>PARKING_SLIP.ACTUAL_EXIT_TIME</code>.
     */
    public byte[] getActualExitTime() {
        return (byte[]) get(2);
    }

    /**
     * Setter for <code>PARKING_SLIP.BASIC_COST</code>.
     */
    public ParkingSlipRecord setBasicCost(BigDecimal value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>PARKING_SLIP.BASIC_COST</code>.
     */
    public BigDecimal getBasicCost() {
        return (BigDecimal) get(3);
    }

    /**
     * Setter for <code>PARKING_SLIP.PARKING_SLOT_RESERVATION_ID</code>.
     */
    public ParkingSlipRecord setParkingSlotReservationId(UUID value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>PARKING_SLIP.PARKING_SLOT_RESERVATION_ID</code>.
     */
    public UUID getParkingSlotReservationId() {
        return (UUID) get(4);
    }

    /**
     * Setter for <code>PARKING_SLIP.PENALTY</code>.
     */
    public ParkingSlipRecord setPenalty(BigDecimal value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>PARKING_SLIP.PENALTY</code>.
     */
    public BigDecimal getPenalty() {
        return (BigDecimal) get(5);
    }

    /**
     * Setter for <code>PARKING_SLIP.TOTAL_COST</code>.
     */
    public ParkingSlipRecord setTotalCost(BigDecimal value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>PARKING_SLIP.TOTAL_COST</code>.
     */
    public BigDecimal getTotalCost() {
        return (BigDecimal) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, byte[], byte[], BigDecimal, UUID, BigDecimal, BigDecimal> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<UUID, byte[], byte[], BigDecimal, UUID, BigDecimal, BigDecimal> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return ParkingSlipTable.PARKING_SLIP.ID;
    }

    @Override
    public Field<byte[]> field2() {
        return ParkingSlipTable.PARKING_SLIP.ACTUAL_ENTRY_TIME;
    }

    @Override
    public Field<byte[]> field3() {
        return ParkingSlipTable.PARKING_SLIP.ACTUAL_EXIT_TIME;
    }

    @Override
    public Field<BigDecimal> field4() {
        return ParkingSlipTable.PARKING_SLIP.BASIC_COST;
    }

    @Override
    public Field<UUID> field5() {
        return ParkingSlipTable.PARKING_SLIP.PARKING_SLOT_RESERVATION_ID;
    }

    @Override
    public Field<BigDecimal> field6() {
        return ParkingSlipTable.PARKING_SLIP.PENALTY;
    }

    @Override
    public Field<BigDecimal> field7() {
        return ParkingSlipTable.PARKING_SLIP.TOTAL_COST;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public byte[] component2() {
        return getActualEntryTime();
    }

    @Override
    public byte[] component3() {
        return getActualExitTime();
    }

    @Override
    public BigDecimal component4() {
        return getBasicCost();
    }

    @Override
    public UUID component5() {
        return getParkingSlotReservationId();
    }

    @Override
    public BigDecimal component6() {
        return getPenalty();
    }

    @Override
    public BigDecimal component7() {
        return getTotalCost();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public byte[] value2() {
        return getActualEntryTime();
    }

    @Override
    public byte[] value3() {
        return getActualExitTime();
    }

    @Override
    public BigDecimal value4() {
        return getBasicCost();
    }

    @Override
    public UUID value5() {
        return getParkingSlotReservationId();
    }

    @Override
    public BigDecimal value6() {
        return getPenalty();
    }

    @Override
    public BigDecimal value7() {
        return getTotalCost();
    }

    @Override
    public ParkingSlipRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public ParkingSlipRecord value2(byte[] value) {
        setActualEntryTime(value);
        return this;
    }

    @Override
    public ParkingSlipRecord value3(byte[] value) {
        setActualExitTime(value);
        return this;
    }

    @Override
    public ParkingSlipRecord value4(BigDecimal value) {
        setBasicCost(value);
        return this;
    }

    @Override
    public ParkingSlipRecord value5(UUID value) {
        setParkingSlotReservationId(value);
        return this;
    }

    @Override
    public ParkingSlipRecord value6(BigDecimal value) {
        setPenalty(value);
        return this;
    }

    @Override
    public ParkingSlipRecord value7(BigDecimal value) {
        setTotalCost(value);
        return this;
    }

    @Override
    public ParkingSlipRecord values(UUID value1, byte[] value2, byte[] value3, BigDecimal value4, UUID value5, BigDecimal value6, BigDecimal value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ParkingSlipRecord
     */
    public ParkingSlipRecord() {
        super(ParkingSlipTable.PARKING_SLIP);
    }

    /**
     * Create a detached, initialised ParkingSlipRecord
     */
    public ParkingSlipRecord(UUID id, byte[] actualEntryTime, byte[] actualExitTime, BigDecimal basicCost, UUID parkingSlotReservationId, BigDecimal penalty, BigDecimal totalCost) {
        super(ParkingSlipTable.PARKING_SLIP);

        setId(id);
        setActualEntryTime(actualEntryTime);
        setActualExitTime(actualExitTime);
        setBasicCost(basicCost);
        setParkingSlotReservationId(parkingSlotReservationId);
        setPenalty(penalty);
        setTotalCost(totalCost);
    }
}
